import keras
from keras.models import Model
from keras.layers import Dense,Conv2D, MaxPool2D, Flatten, Input, GlobalAvgPool2D
from  keras.layers import BatchNormalization
from  keras.layers import Activation
from keras.datasets import cifar10
from keras.datasets import cifar100
import numpy as np

from keras.preprocessing.image import ImageDataGenerator

from keras.utils import np_utils

from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, TensorBoard
# refer to https://github.com/raghakot/keras-resnet
def head(inx,width, height):
    # x = Input(shape=(width, height, 3))
    x = conv_bn_relu(inx, filters=64, kernel_size=(7, 7),strides=(2,2), padding='same')
    x = MaxPool2D(pool_size=(3, 3), strides=(2, 2))(x)
    return x

def conv_bn(inx, filters, kernel_size, strides=(1, 1),padding='valid'):
    x = Conv2D(filters=filters, kernel_size=kernel_size,strides=strides, padding=padding)(inx)
    x = BatchNormalization()(x)
    return x


def conv_bn_relu(inx, filters, kernel_size, strides=(1,1),padding='valid'):
    x = conv_bn(inx=inx, filters=filters, kernel_size=kernel_size, strides=strides,padding=padding)
    x = Activation(activation='relu')(x)
    return x

def resiblocl_botton(inx, filters):
    filters1, filters2, filters3 = filters
    x = conv_bn_relu(inx, filters1, (1, 1))
    x = conv_bn_relu(x, filters2, kernel_size=(3,3),padding='same')
    x = conv_bn_relu(x, filters3, (1, 1))
    return x

def group(inx, filters, count):
    x = inx
    for i in  range(count):
        x = resiblocl_botton(x, filters)
    MaxPool2D(pool_size=(2,2))(x)
    return x

def ResNet50(width, height,num_class):
    input = Input(shape=(width, height, 3))
    x = head(input,width, height)
    filters2 = [64,64,256]
    filters3 = [128,128,512]
    filters4 = [256,256,1024]
    filters5 = [512,512,2048]
    x = group(x, filters2, 3)
    x = group(x, filters3, 4)
    x = group(x, filters4, 6)
    x = group(x, filters5, 3)
    x = GlobalAvgPool2D()(x)
    out = Dense(units=num_class)(x)
    model = Model(inputs=input, outputs=out)
    return model

if __name__ == '__main__':
    model = ResNet50(32,32,10)

    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
    Y_train = np_utils.to_categorical(y_train, 10)
    Y_test = np_utils.to_categorical(y_test, 10)
    X_train = x_train.astype('float32')
    X_test = x_test.astype('float32')
    # subtract mean and normalize

    mean_image = np.mean(X_train, axis=0)
    X_train -= mean_image
    X_test -= mean_image
    X_train /= 128.
    X_test /= 128.
    callbacks = []
    name = 'xinyan'
    tb = TensorBoard(log_dir='./logs/{}'.format(name))
    model_checkpoint = ModelCheckpoint('./weights/{}.hdf5'.format(name), monitor='val_loss', save_best_only=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-7)
    callbacks.extend([reduce_lr, tb, model_checkpoint])
    print('Training {}'.format(name))

    # This will do preprocessing and realtime data augmentation:

    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images
    # Compute quantities required for feature-wise normalization

    # (std, mean, and principal components if ZCA whitening is applied).
    # datagen.fit(X_train)
    # Fit the model on the batches generated by datagen.flow().
    batch_size = 32
    nb_epoch = 200
    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    model.fit(x=X_train,
            y=Y_train,
            batch_size=batch_size,
            epochs=nb_epoch,
            verbose=1,
            callbacks=callbacks,
            validation_data=(X_test, Y_test)
        )
    # model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),
    #                     steps_per_epoch=X_train.shape[0],
    #                     epochs=nb_epoch, verbose=2,max_queue_size=1000,
    #                     callbacks=callbacks, validation_data=(X_test, Y_test))

    model.evaluate(X_test,Y_test)
